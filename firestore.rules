rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return request.auth.uid == userId;
    }

    function isMyItem() {
      return existingData().userRef == documentPath(['users',request.auth.uid])
    }

    function isRequestMyItem() {
      return incomingData().userRef == documentPath(['users',request.auth.uid])
    }

    function isPublicItem() {
      return existingData().isPublic == true;
    }

    function isItemLikeCountUpdate() {
      return isPublicItem()
        && dataDiff().affectedKeys().size() == 2 // update likeCount, likedUserIds
        && isChanged(["likeCount", "likedUserIds"])
        && isNotChanged(["id"])
        && incomingData().likeCount == existingData().likeCount + 1
    }

    function isUserCountUpdate() {
      return request.resource.data.size() == 1
        && (request.resource.data.totalStaredCount != null
            || request.resource.data.totalLikedCount != null
            || request.resource.data.profileViewedCount != null);
    }

    function documentPath(paths) {
      return path([
        ['databases', database, 'documents'].join('/'),
        paths.join('/')
        ].join('/')
      );
    }

    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    function dataDiff() {
      return incomingData().diff(existingData());
    }

    function isChanged(keys) {
      let affectedKeys = dataDiff().affectedKeys();
      return affectedKeys.hasAny(keys.toSet());
    }

    function isNotChanged(keys) {
      let affectedKeys = dataDiff().affectedKeys();
      return !affectedKeys.hasAny(keys.toSet());
    }

    match /users/{userId} {
      allow get: if isAuthenticated();
      allow create: if isUserAuthenticated(userId);
      allow update: if isUserAuthenticated(userId) || isUserCountUpdate();
    }

    match /items/{itemId} {
      allow create: if isRequestMyItem();
      allow delete: if isMyItem();
      allow read: if isMyItem() || isPublicItem();
      allow update: if isMyItem() || isItemLikeCountUpdate();
    }

    match /notifications/{itemId} {
      allow create, get: if isAuthenticated();
      allow update, list, delete: if isMyItem();
    }
  }
}