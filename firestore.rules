rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return request.auth.uid == userId;
    }

    function isMyItem() {
      return resource.data.userRef != null
        && resource.data.userRef
        == /databases/$(database)/documents/users/$(request.auth.uid)
    }

    function isRequestMyItem() {
      return request.resource.data.userRef != null
        && request.resource.data.userRef
        == /databases/$(database)/documents/users/$(request.auth.uid)
    }

    function isPublicItem() {
      return resource.data.isPublic == true;
    }

    function isItemCountUpdate() {
      return resource.data.isPublic == true
        && request.resource.data.size() == 12
        && request.resource.data.id != null
        && request.resource.data.likeCount != null
        && request.resource.data.likedUserIds != null
    }

    function isUserCountUpdate() {
      return request.resource.data.size() == 1
        && (request.resource.data.totalStaredCount != null
            || request.resource.data.totalLikedCount != null
            || request.resource.data.profileViewedCount != null);
    }

    match /users/{userId} {
      allow get: if isAuthenticated();
      allow create: if isUserAuthenticated(userId);
      allow update: if isUserAuthenticated(userId) || isUserCountUpdate();
    }

    match /items/{itemId} {
      allow create: if isRequestMyItem();
      allow delete: if isMyItem();
      allow read: if isMyItem() || isPublicItem();
      allow update: if isMyItem() || isItemCountUpdate();
    }

    match /notifications/{itemId} {
      allow create, get: if isAuthenticated();
      allow update, list, delete: if isMyItem();
    }
  }
}